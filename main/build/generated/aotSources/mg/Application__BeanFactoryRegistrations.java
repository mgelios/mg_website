package mg;

import mg.api.external.ExternalApiCacheConfiguration__BeanDefinitions;
import mg.api.external.controller.ApiConsumerRestController__BeanDefinitions;
import mg.api.external.controller.ExternalApiCacheController__BeanDefinitions;
import mg.api.external.mapper.ApiConsumerMapperImpl__BeanDefinitions;
import mg.api.external.mapper.ExternalApiResponseMapperImpl__BeanDefinitions;
import mg.api.external.repository.ApiConsumerRepository__BeanDefinitions;
import mg.api.external.repository.ExternalApiResponseRepository__BeanDefinitions;
import mg.api.external.service.ApiConsumerService__BeanDefinitions;
import mg.api.external.service.ExternalApiCacheService__BeanDefinitions;
import mg.news.NewsConfiguration__BeanDefinitions;
import mg.news.controller.NewsRestController__BeanDefinitions;
import mg.news.controller.PodcastRestController__BeanDefinitions;
import mg.news.mapper.RadiotArticleMapperImpl__BeanDefinitions;
import mg.news.mapper.RadiotPodcastMapperImpl__BeanDefinitions;
import mg.news.mapper.RadiotPodcastTimeLabelMapperImpl__BeanDefinitions;
import mg.news.repository.RadiotArticleRepository__BeanDefinitions;
import mg.news.repository.RadiotPodcastRepository__BeanDefinitions;
import mg.news.repository.RadiotPodcastTimeLabelRepository__BeanDefinitions;
import mg.news.service.RadiotArticleService__BeanDefinitions;
import mg.news.service.RadiotExternalApiService__BeanDefinitions;
import mg.news.service.RadiotPodcastService__BeanDefinitions;
import mg.news.util.RadiotUrlBuilder__BeanDefinitions;
import mg.profile.conrtoller.AdminUserRestController__BeanDefinitions;
import mg.profile.conrtoller.AuthorizedUserRestController__BeanDefinitions;
import mg.profile.conrtoller.GuestUserRestController__BeanDefinitions;
import mg.profile.mapper.UserMapperImpl__BeanDefinitions;
import mg.profile.repository.UserRepository__BeanDefinitions;
import mg.profile.service.BasicUserDetailsService__BeanDefinitions;
import mg.profile.service.UserService__BeanDefinitions;
import mg.security.MgMvcConfigurerAdapter__BeanDefinitions;
import mg.security.basic.BasicAuthenticationProvider__BeanDefinitions;
import mg.security.basic.BasicAuthenticationSuccessHandler__BeanDefinitions;
import mg.security.basic.MGBasicAuthenticationEntryPoint__BeanDefinitions;
import mg.security.error.AuthenticationFailureHandler__BeanDefinitions;
import mg.security.token.JWTLoginController__BeanDefinitions;
import mg.security.token.JWTService__BeanDefinitions;
import mg.utils.BasicJSONConsumer__BeanDefinitions;
import mg.utils.BasicJSONHelper__BeanDefinitions;
import mg.utils.exception.CustomExceptionHandlersContainer__BeanDefinitions;
import mg.utils.mapper.DateMapperImpl__BeanDefinitions;
import mg.weather.WeatherConfiguration__BeanDefinitions;
import mg.weather.controller.WeatherController__BeanDefinitions;
import mg.weather.mapper.CurrentWeatherMapperImpl__BeanDefinitions;
import mg.weather.mapper.DailyWeatherForecastMapperImpl__BeanDefinitions;
import mg.weather.mapper.GeocodingInfoMapperImpl__BeanDefinitions;
import mg.weather.mapper.OneCallMapperImpl__BeanDefinitions;
import mg.weather.mapper.TemperatureFeelsLikeMapperImpl__BeanDefinitions;
import mg.weather.mapper.TemperatureInfoMapperImpl__BeanDefinitions;
import mg.weather.mapper.WeatherMapperImpl__BeanDefinitions;
import mg.weather.repository.OneCallRepository__BeanDefinitions;
import mg.weather.service.CurrentWeatherService__BeanDefinitions;
import mg.weather.service.OpenWeatherApiService__BeanDefinitions;
import mg.weather.util.OpenWeatherUrlBuilder__BeanDefinitions;
import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions;
import org.springframework.aot.generate.Generated;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.autoconfigure.AutoConfigurationPackages__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.SecurityProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.session.SessionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.ServerProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.WebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.context.properties.BoundConfigurationProperties__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor__BeanDefinitions;
import org.springframework.boot.jackson.JsonMixinModuleEntries__BeanDefinitions;
import org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer__BeanDefinitions;
import org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter__BeanDefinitions;
import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor__BeanDefinitions;
import org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions;
import org.springframework.context.event.DefaultEventListenerFactory__BeanDefinitions;
import org.springframework.context.event.EventListenerMethodProcessor__BeanDefinitions;
import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext__BeanDefinitions;
import org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension__BeanDefinitions;
import org.springframework.data.jpa.repository.support.DefaultJpaContext__BeanDefinitions;
import org.springframework.data.jpa.repository.support.EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions;
import org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension__BeanDefinitions;
import org.springframework.data.jpa.util.JpaMetamodelCacheCleanup__BeanDefinitions;
import org.springframework.data.repository.core.support.PropertiesBasedNamedQueries__BeanDefinitions;
import org.springframework.data.repository.core.support.RepositoryComposition__BeanDefinitions;
import org.springframework.data.web.config.ProjectingArgumentResolverRegistrar__BeanDefinitions;
import org.springframework.data.web.config.SpringDataJacksonConfiguration__BeanDefinitions;
import org.springframework.data.web.config.SpringDataWebConfiguration__BeanDefinitions;
import org.springframework.orm.jpa.SharedEntityManagerCreator__BeanDefinitions;
import org.springframework.scheduling.annotation.ProxyAsyncConfiguration__BeanDefinitions;
import org.springframework.scheduling.annotation.SchedulingConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration__BeanDefinitions;
import org.springframework.security.web.access.HandlerMappingIntrospectorRequestTransformer__BeanDefinitions;
import org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration__BeanDefinitions;
import org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration__BeanDefinitions;
import org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration__BeanDefinitions;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport__BeanDefinitions;

/**
 * Register bean definitions for the bean factory.
 */
@Generated
public class Application__BeanFactoryRegistrations {
  /**
   * Register the bean definitions.
   */
  public void registerBeanDefinitions(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerProcessor", EventListenerMethodProcessor__BeanDefinitions.getInternalEventListenerProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerFactory", DefaultEventListenerFactory__BeanDefinitions.getInternalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("application", Application__BeanDefinitions.getApplicationBeanDefinition());
    beanFactory.registerBeanDefinition("appConfig", AppConfig__BeanDefinitions.getAppConfigBeanDefinition());
    beanFactory.registerBeanDefinition("jpaConfig", JpaConfig__BeanDefinitions.getJpaConfigBeanDefinition());
    beanFactory.registerBeanDefinition("webConfig", WebConfig__BeanDefinitions.getWebConfigBeanDefinition());
    beanFactory.registerBeanDefinition("weatherConfiguration", WeatherConfiguration__BeanDefinitions.getWeatherConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("geocodingInfoMapperImpl", GeocodingInfoMapperImpl__BeanDefinitions.getGeocodingInfoMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("temperatureInfoMapperImpl", TemperatureInfoMapperImpl__BeanDefinitions.getTemperatureInfoMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("oneCallMapperImpl", OneCallMapperImpl__BeanDefinitions.getOneCallMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("weatherMapperImpl", WeatherMapperImpl__BeanDefinitions.getWeatherMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("dailyWeatherForecastMapperImpl", DailyWeatherForecastMapperImpl__BeanDefinitions.getDailyWeatherForecastMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("temperatureFeelsLikeMapperImpl", TemperatureFeelsLikeMapperImpl__BeanDefinitions.getTemperatureFeelsLikeMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("currentWeatherMapperImpl", CurrentWeatherMapperImpl__BeanDefinitions.getCurrentWeatherMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("openWeatherApiService", OpenWeatherApiService__BeanDefinitions.getOpenWeatherApiServiceBeanDefinition());
    beanFactory.registerBeanDefinition("currentWeatherService", CurrentWeatherService__BeanDefinitions.getCurrentWeatherServiceBeanDefinition());
    beanFactory.registerBeanDefinition("openWeatherUrlBuilder", OpenWeatherUrlBuilder__BeanDefinitions.getOpenWeatherUrlBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("weatherController", WeatherController__BeanDefinitions.getWeatherControllerBeanDefinition());
    beanFactory.registerBeanDefinition("externalApiCacheConfiguration", ExternalApiCacheConfiguration__BeanDefinitions.getExternalApiCacheConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("externalApiResponseMapperImpl", ExternalApiResponseMapperImpl__BeanDefinitions.getExternalApiResponseMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("apiConsumerMapperImpl", ApiConsumerMapperImpl__BeanDefinitions.getApiConsumerMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("externalApiCacheService", ExternalApiCacheService__BeanDefinitions.getExternalApiCacheServiceBeanDefinition());
    beanFactory.registerBeanDefinition("apiConsumerService", ApiConsumerService__BeanDefinitions.getApiConsumerServiceBeanDefinition());
    beanFactory.registerBeanDefinition("externalApiCacheController", ExternalApiCacheController__BeanDefinitions.getExternalApiCacheControllerBeanDefinition());
    beanFactory.registerBeanDefinition("apiConsumerRestController", ApiConsumerRestController__BeanDefinitions.getApiConsumerRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("newsConfiguration", NewsConfiguration__BeanDefinitions.getNewsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("radiotPodcastTimeLabelMapperImpl", RadiotPodcastTimeLabelMapperImpl__BeanDefinitions.getRadiotPodcastTimeLabelMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("radiotPodcastMapperImpl", RadiotPodcastMapperImpl__BeanDefinitions.getRadiotPodcastMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("radiotArticleMapperImpl", RadiotArticleMapperImpl__BeanDefinitions.getRadiotArticleMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("radiotExternalApiService", RadiotExternalApiService__BeanDefinitions.getRadiotExternalApiServiceBeanDefinition());
    beanFactory.registerBeanDefinition("radiotPodcastService", RadiotPodcastService__BeanDefinitions.getRadiotPodcastServiceBeanDefinition());
    beanFactory.registerBeanDefinition("radiotArticleService", RadiotArticleService__BeanDefinitions.getRadiotArticleServiceBeanDefinition());
    beanFactory.registerBeanDefinition("radiotUrlBuilder", RadiotUrlBuilder__BeanDefinitions.getRadiotUrlBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("podcastRestController", PodcastRestController__BeanDefinitions.getPodcastRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("newsRestController", NewsRestController__BeanDefinitions.getNewsRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("basicJSONConsumer", BasicJSONConsumer__BeanDefinitions.getBasicJSONConsumerBeanDefinition());
    beanFactory.registerBeanDefinition("customExceptionHandlersContainer", CustomExceptionHandlersContainer__BeanDefinitions.getCustomExceptionHandlersContainerBeanDefinition());
    beanFactory.registerBeanDefinition("dateMapperImpl", DateMapperImpl__BeanDefinitions.getDateMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("basicJSONHelper", BasicJSONHelper__BeanDefinitions.getBasicJSONHelperBeanDefinition());
    beanFactory.registerBeanDefinition("mgMvcConfigurerAdapter", MgMvcConfigurerAdapter__BeanDefinitions.getMgMvcConfigurerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("JWTLoginController", JWTLoginController__BeanDefinitions.getJWTLoginControllerBeanDefinition());
    beanFactory.registerBeanDefinition("JWTService", JWTService__BeanDefinitions.getJWTServiceBeanDefinition());
    beanFactory.registerBeanDefinition("MGBasicAuthenticationEntryPoint", MGBasicAuthenticationEntryPoint__BeanDefinitions.getMGBasicAuthenticationEntryPointBeanDefinition());
    beanFactory.registerBeanDefinition("basicAuthenticationSuccessHandler", BasicAuthenticationSuccessHandler__BeanDefinitions.getBasicAuthenticationSuccessHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("basicAuthenticationProvider", BasicAuthenticationProvider__BeanDefinitions.getBasicAuthenticationProviderBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationFailureHandler", AuthenticationFailureHandler__BeanDefinitions.getAuthenticationFailureHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("authorizedUserRestController", AuthorizedUserRestController__BeanDefinitions.getAuthorizedUserRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("guestUserRestController", GuestUserRestController__BeanDefinitions.getGuestUserRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("adminUserRestController", AdminUserRestController__BeanDefinitions.getAdminUserRestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("userMapperImpl", UserMapperImpl__BeanDefinitions.getUserMapperImplBeanDefinition());
    beanFactory.registerBeanDefinition("basicUserDetailsService", BasicUserDetailsService__BeanDefinitions.getBasicUserDetailsServiceBeanDefinition());
    beanFactory.registerBeanDefinition("userService", UserService__BeanDefinitions.getUserServiceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.scheduling.annotation.ProxyAsyncConfiguration", ProxyAsyncConfiguration__BeanDefinitions.getProxyAsyncConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.annotation.internalAsyncAnnotationProcessor", ProxyAsyncConfiguration__BeanDefinitions.getInternalAsyncAnnotationProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.scheduling.annotation.SchedulingConfiguration", SchedulingConfiguration__BeanDefinitions.getSchedulingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.annotation.internalScheduledAnnotationProcessor", SchedulingConfiguration__BeanDefinitions.getInternalScheduledAnnotationProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration", ObjectPostProcessorConfiguration__BeanDefinitions.getObjectPostProcessorConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("objectPostProcessor", ObjectPostProcessorConfiguration__BeanDefinitions.getObjectPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration", AuthenticationConfiguration__BeanDefinitions.getAuthenticationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationManagerBuilder", AuthenticationConfiguration__BeanDefinitions.getAuthenticationManagerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("enableGlobalAuthenticationAutowiredConfigurer", AuthenticationConfiguration__BeanDefinitions.getEnableGlobalAuthenticationAutowiredConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("initializeUserDetailsBeanManagerConfigurer", AuthenticationConfiguration__BeanDefinitions.getInitializeUserDetailsBeanManagerConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("initializeAuthenticationProviderBeanManagerConfigurer", AuthenticationConfiguration__BeanDefinitions.getInitializeAuthenticationProviderBeanManagerConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration", WebSecurityConfiguration__BeanDefinitions.getWebSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("delegatingApplicationListener", WebSecurityConfiguration__BeanDefinitions.getDelegatingApplicationListenerBeanDefinition());
    beanFactory.registerBeanDefinition("webSecurityExpressionHandler", WebSecurityConfiguration__BeanDefinitions.getWebSecurityExpressionHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("privilegeEvaluator", WebSecurityConfiguration__BeanDefinitions.getPrivilegeEvaluatorBeanDefinition());
    beanFactory.registerBeanDefinition("conversionServicePostProcessor", WebSecurityConfiguration__BeanDefinitions.getConversionServicePostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration", WebMvcSecurityConfiguration__BeanDefinitions.getWebMvcSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("requestDataValueProcessor", WebMvcSecurityConfiguration__BeanDefinitions.getRequestDataValueProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("springSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessor", WebMvcSecurityConfiguration__BeanDefinitions.getSpringSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration", HttpSecurityConfiguration__BeanDefinitions.getHttpSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity", HttpSecurityConfiguration__BeanDefinitions.getHttpSecurityBeanDefinition());
    beanFactory.registerBeanDefinition("filterChain", AppConfig__BeanDefinitions.getFilterChainBeanDefinition());
    beanFactory.registerBeanDefinition("passwordEncoder", AppConfig__BeanDefinitions.getPasswordEncoderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration", ProxyTransactionManagementConfiguration__BeanDefinitions.getProxyTransactionManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.config.internalTransactionAdvisor", ProxyTransactionManagementConfiguration__BeanDefinitions.getInternalTransactionAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("transactionAttributeSource", ProxyTransactionManagementConfiguration__BeanDefinitions.getTransactionAttributeSourceBeanDefinition());
    beanFactory.registerBeanDefinition("transactionInterceptor", ProxyTransactionManagementConfiguration__BeanDefinitions.getTransactionInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.transaction.config.internalTransactionalEventListenerFactory", AbstractTransactionManagementConfiguration__BeanDefinitions.getInternalTransactionalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("entityManagerFactory", JpaConfig__BeanDefinitions.getEntityManagerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("openEntityManagerInViewFilter", JpaConfig__BeanDefinitions.getOpenEntityManagerInViewFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.aop.config.internalAutoProxyCreator", AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions.getInternalAutoProxyCreatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension#0", JpaRepositoryConfigExtension__BeanDefinitions.getJpaRepositoryConfigExtensionBeanDefinition());
    beanFactory.registerBeanDefinition("jpaSharedEM_entityManagerFactory", SharedEntityManagerCreator__BeanDefinitions.getJpaSharedEMentityManagerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("emBeanDefinitionRegistrarPostProcessor", EntityManagerBeanDefinitionRegistrarPostProcessor__BeanDefinitions.getEmBeanDefinitionRegistrarPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("jpaMappingContext", JpaMetamodelMappingContext__BeanDefinitions.getJpaMappingContextBeanDefinition());
    beanFactory.registerBeanDefinition("jpaContext", DefaultJpaContext__BeanDefinitions.getJpaContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.jpa.util.JpaMetamodelCacheCleanup", JpaMetamodelCacheCleanup__BeanDefinitions.getJpaMetamodelCacheCleanupBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension", JpaEvaluationContextExtension__BeanDefinitions.getJpaEvaluationContextExtensionBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#0", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.ExternalApiResponseRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition());
    beanFactory.registerBeanDefinition("externalApiResponseRepository", ExternalApiResponseRepository__BeanDefinitions.getExternalApiResponseRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#1", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition1());
    beanFactory.registerBeanDefinition("jpa.OneCallRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition1());
    beanFactory.registerBeanDefinition("oneCallRepository", OneCallRepository__BeanDefinitions.getOneCallRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#2", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition2());
    beanFactory.registerBeanDefinition("jpa.RadiotArticleRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition2());
    beanFactory.registerBeanDefinition("radiotArticleRepository", RadiotArticleRepository__BeanDefinitions.getRadiotArticleRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#3", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition3());
    beanFactory.registerBeanDefinition("jpa.UserRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition3());
    beanFactory.registerBeanDefinition("userRepository", UserRepository__BeanDefinitions.getUserRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#4", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition4());
    beanFactory.registerBeanDefinition("jpa.RadiotPodcastTimeLabelRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition4());
    beanFactory.registerBeanDefinition("radiotPodcastTimeLabelRepository", RadiotPodcastTimeLabelRepository__BeanDefinitions.getRadiotPodcastTimeLabelRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#5", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition5());
    beanFactory.registerBeanDefinition("jpa.RadiotPodcastRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition5());
    beanFactory.registerBeanDefinition("radiotPodcastRepository", RadiotPodcastRepository__BeanDefinitions.getRadiotPodcastRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("jpa.named-queries#6", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition6());
    beanFactory.registerBeanDefinition("jpa.ApiConsumerRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition6());
    beanFactory.registerBeanDefinition("apiConsumerRepository", ApiConsumerRepository__BeanDefinitions.getApiConsumerRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration", DelegatingWebMvcConfiguration__BeanDefinitions.getDelegatingWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getRequestMappingHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPatternParser", WebMvcConfigurationSupport__BeanDefinitions.getMvcPatternParserBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUrlPathHelper", WebMvcConfigurationSupport__BeanDefinitions.getMvcUrlPathHelperBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPathMatcher", WebMvcConfigurationSupport__BeanDefinitions.getMvcPathMatcherBeanDefinition());
    beanFactory.registerBeanDefinition("mvcContentNegotiationManager", WebMvcConfigurationSupport__BeanDefinitions.getMvcContentNegotiationManagerBeanDefinition());
    beanFactory.registerBeanDefinition("viewControllerHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getViewControllerHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getBeanNameHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionMapping", WebMvcConfigurationSupport__BeanDefinitions.getRouterFunctionMappingBeanDefinition());
    beanFactory.registerBeanDefinition("resourceHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getResourceHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcResourceUrlProvider", WebMvcConfigurationSupport__BeanDefinitions.getMvcResourceUrlProviderBeanDefinition());
    beanFactory.registerBeanDefinition("defaultServletHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getDefaultServletHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerAdapter", WebMvcConfigurationSupport__BeanDefinitions.getRequestMappingHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerFunctionAdapter", WebMvcConfigurationSupport__BeanDefinitions.getHandlerFunctionAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("mvcConversionService", WebMvcConfigurationSupport__BeanDefinitions.getMvcConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("mvcValidator", WebMvcConfigurationSupport__BeanDefinitions.getMvcValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUriComponentsContributor", WebMvcConfigurationSupport__BeanDefinitions.getMvcUriComponentsContributorBeanDefinition());
    beanFactory.registerBeanDefinition("httpRequestHandlerAdapter", WebMvcConfigurationSupport__BeanDefinitions.getHttpRequestHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("simpleControllerHandlerAdapter", WebMvcConfigurationSupport__BeanDefinitions.getSimpleControllerHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerExceptionResolver", WebMvcConfigurationSupport__BeanDefinitions.getHandlerExceptionResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcViewResolver", WebMvcConfigurationSupport__BeanDefinitions.getMvcViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcHandlerMappingIntrospector", WebMvcConfigurationSupport__BeanDefinitions.getMvcHandlerMappingIntrospectorBeanDefinition());
    beanFactory.registerBeanDefinition("localeResolver", WebMvcConfigurationSupport__BeanDefinitions.getLocaleResolverBeanDefinition());
    beanFactory.registerBeanDefinition("themeResolver", WebMvcConfigurationSupport__BeanDefinitions.getThemeResolverBeanDefinition());
    beanFactory.registerBeanDefinition("flashMapManager", WebMvcConfigurationSupport__BeanDefinitions.getFlashMapManagerBeanDefinition());
    beanFactory.registerBeanDefinition("viewNameTranslator", WebMvcConfigurationSupport__BeanDefinitions.getViewNameTranslatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.getConfigurationPropertiesBindingPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinder", ConfigurationPropertiesBinder__BeanDefinitions.ConfigurationPropertiesBinderFactory.getInternalConfigurationPropertiesBinderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.BoundConfigurationProperties", BoundConfigurationProperties__BeanDefinitions.getBoundConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter", MethodValidationExcludeFilter__BeanDefinitions.getMethodValidationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("mg.weather-mg.weather.WeatherConfiguration", WeatherConfiguration__BeanDefinitions.getWeatherConfigurationBeanDefinition1());
    beanFactory.registerBeanDefinition("mg.news-mg.news.NewsConfiguration", NewsConfiguration__BeanDefinitions.getNewsConfigurationBeanDefinition1());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.AutoConfigurationPackages", AutoConfigurationPackages__BeanDefinitions.BasePackages.getAutoConfigurationPackagesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertyPlaceholderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("propertySourcesPlaceholderConfigurer", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertySourcesPlaceholderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration", SslAutoConfiguration__BeanDefinitions.getSslAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("fileWatcher", SslAutoConfiguration__BeanDefinitions.getFileWatcherBeanDefinition());
    beanFactory.registerBeanDefinition("sslPropertiesSslBundleRegistrar", SslAutoConfiguration__BeanDefinitions.getSslPropertiesSslBundleRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("sslBundleRegistry", SslAutoConfiguration__BeanDefinitions.getSslBundleRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties", SslProperties__BeanDefinitions.getSslPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getTomcatWebSocketConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("websocketServletWebServerCustomizer", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getWebsocketServletWebServerCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.getWebSocketServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getEmbeddedTomcatBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactory", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getTomcatServletWebServerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("servletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getTomcatServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("server-org.springframework.boot.autoconfigure.web.ServerProperties", ServerProperties__BeanDefinitions.getServerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("webServerFactoryCustomizerBeanPostProcessor", WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions.getWebServerFactoryCustomizerBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageRegistrarBeanPostProcessor", ErrorPageRegistrarBeanPostProcessor__BeanDefinitions.getErrorPageRegistrarBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServlet", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletBeanDefinition());
    beanFactory.registerBeanDefinition("spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties", WebMvcProperties__BeanDefinitions.getWebMvcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServletRegistration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.getDispatcherServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration", TaskExecutorConfigurations__BeanDefinitions.ThreadPoolTaskExecutorBuilderConfiguration.getThreadPoolTaskExecutorBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("threadPoolTaskExecutorBuilder", TaskExecutorConfigurations__BeanDefinitions.ThreadPoolTaskExecutorBuilderConfiguration.getThreadPoolTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorBuilderConfiguration.getTaskExecutorBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskExecutorBuilder", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorBuilderConfiguration.getTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration", TaskExecutorConfigurations__BeanDefinitions.SimpleAsyncTaskExecutorBuilderConfiguration.getSimpleAsyncTaskExecutorBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("simpleAsyncTaskExecutorBuilder", TaskExecutorConfigurations__BeanDefinitions.SimpleAsyncTaskExecutorBuilderConfiguration.getSimpleAsyncTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorConfiguration.getTaskExecutorConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationTaskExecutor", TaskExecutorConfigurations__BeanDefinitions.TaskExecutorConfiguration.getApplicationTaskExecutorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties", TaskExecutionProperties__BeanDefinitions.getTaskExecutionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration", ValidationAutoConfiguration__BeanDefinitions.getValidationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultValidator", ValidationAutoConfiguration__BeanDefinitions.getDefaultValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("methodValidationPostProcessor", ValidationAutoConfiguration__BeanDefinitions.getMethodValidationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getDefaultErrorViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("conventionErrorViewResolver", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getConventionErrorViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.web-org.springframework.boot.autoconfigure.web.WebProperties", WebProperties__BeanDefinitions.getWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("errorAttributes", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorAttributesBeanDefinition());
    beanFactory.registerBeanDefinition("basicErrorController", ErrorMvcAutoConfiguration__BeanDefinitions.getBasicErrorControllerBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageCustomizer", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorPageCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("preserveErrorControllerTargetClassPostProcessor", ErrorMvcAutoConfiguration__BeanDefinitions.getPreserveErrorControllerTargetClassPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration", AopAutoConfiguration__BeanDefinitions.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration.getCglibAutoProxyConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration", AopAutoConfiguration__BeanDefinitions.AspectJAutoProxyingConfiguration.getAspectJAutoProxyingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration", AopAutoConfiguration__BeanDefinitions.getAopAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationAvailability", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration", JtaAutoConfiguration__BeanDefinitions.getJtaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari", DataSourceConfiguration__BeanDefinitions.Hikari.getHikariBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcConnectionDetailsHikariBeanPostProcessor", DataSourceConfiguration__BeanDefinitions.Hikari.getJdbcConnectionDetailsHikariBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("dataSource", DataSourceConfiguration__BeanDefinitions.Hikari.getDataSourceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari", DataSourceJmxConfiguration__BeanDefinitions.Hikari.getHikariBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration", DataSourceJmxConfiguration__BeanDefinitions.getDataSourceJmxConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration", DataSourceAutoConfiguration__BeanDefinitions.PooledDataSourceConfiguration.getPooledDataSourceConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcConnectionDetails", DataSourceAutoConfiguration__BeanDefinitions.PooledDataSourceConfiguration.getJdbcConnectionDetailsBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.HikariPoolDataSourceMetadataProviderConfiguration.getHikariPoolDataSourceMetadataProviderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("hikariPoolDataSourceMetadataProvider", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.HikariPoolDataSourceMetadataProviderConfiguration.getHikariPoolDataSourceMetadataProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration", DataSourcePoolMetadataProvidersConfiguration__BeanDefinitions.getDataSourcePoolMetadataProvidersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration", DataSourceAutoConfiguration__BeanDefinitions.getDataSourceAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties", DataSourceProperties__BeanDefinitions.getDataSourcePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getTransactionManagerCustomizationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("platformTransactionManagerCustomizers", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getPlatformTransactionManagerCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("transactionExecutionListeners", TransactionManagerCustomizationAutoConfiguration__BeanDefinitions.getTransactionExecutionListenersBeanDefinition());
    beanFactory.registerBeanDefinition("spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties", TransactionProperties__BeanDefinitions.getTransactionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration", HibernateJpaConfiguration__BeanDefinitions.getHibernateJpaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("transactionManager", JpaBaseConfiguration__BeanDefinitions.getTransactionManagerBeanDefinition());
    beanFactory.registerBeanDefinition("jpaVendorAdapter", JpaBaseConfiguration__BeanDefinitions.getJpaVendorAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("entityManagerFactoryBuilder", JpaBaseConfiguration__BeanDefinitions.getEntityManagerFactoryBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties", HibernateProperties__BeanDefinitions.getHibernatePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties", JpaProperties__BeanDefinitions.getJpaPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration", HibernateJpaAutoConfiguration__BeanDefinitions.getHibernateJpaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("standardJacksonObjectMapperBuilderCustomizer", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", JacksonProperties__BeanDefinitions.getJacksonPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapperBuilder", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("parameterNamesModule", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapper", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJacksonMixinConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModuleEntries", JsonMixinModuleEntries__BeanDefinitions.getJsonMixinModuleEntriesBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModule", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJsonMixinModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", JacksonAutoConfiguration__BeanDefinitions.getJacksonAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonComponentModule", JacksonAutoConfiguration__BeanDefinitions.getJsonComponentModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration", ConfigurationPropertiesAutoConfiguration__BeanDefinitions.getConfigurationPropertiesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("lifecycleProcessor", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties", LifecycleProperties__BeanDefinitions.getLifecyclePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceExceptionTranslationPostProcessor", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("stringHttpMessageConverter", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mappingJackson2HttpMessageConverter", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.getJacksonHttpMessageConvertersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getHttpMessageConvertersAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverters", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getMessageConvertersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.ProjectingArgumentResolverRegistrar", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("projectingArgumentResolverBeanPostProcessor", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataWebConfiguration", SpringDataWebConfiguration__BeanDefinitions.getSpringDataWebConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableResolver", SpringDataWebConfiguration__BeanDefinitions.getPageableResolverBeanDefinition());
    beanFactory.registerBeanDefinition("sortResolver", SpringDataWebConfiguration__BeanDefinitions.getSortResolverBeanDefinition());
    beanFactory.registerBeanDefinition("offsetResolver", SpringDataWebConfiguration__BeanDefinitions.getOffsetResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataJacksonConfiguration", SpringDataJacksonConfiguration__BeanDefinitions.getSpringDataJacksonConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonGeoModule", SpringDataJacksonConfiguration__BeanDefinitions.getJacksonGeoModuleBeanDefinition());
    beanFactory.registerBeanDefinition("pageModule", SpringDataJacksonConfiguration__BeanDefinitions.getPageModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration", SpringDataWebAutoConfiguration__BeanDefinitions.getSpringDataWebAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getPageableCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("sortCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getSortCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties", SpringDataWebProperties__BeanDefinitions.getSpringDataWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration", ProjectInfoAutoConfiguration__BeanDefinitions.getProjectInfoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties", ProjectInfoProperties__BeanDefinitions.getProjectInfoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration", JdbcTemplateConfiguration__BeanDefinitions.getJdbcTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcTemplate", JdbcTemplateConfiguration__BeanDefinitions.getJdbcTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration", NamedParameterJdbcTemplateConfiguration__BeanDefinitions.getNamedParameterJdbcTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("namedParameterJdbcTemplate", NamedParameterJdbcTemplateConfiguration__BeanDefinitions.getNamedParameterJdbcTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration", JdbcTemplateAutoConfiguration__BeanDefinitions.getJdbcTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties", JdbcProperties__BeanDefinitions.getJdbcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor", DatabaseInitializationDependencyConfigurer__BeanDefinitions.DependsOnDatabaseInitializationPostProcessor.getDependsOnDatabaseInitializationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration", JdbcClientAutoConfiguration__BeanDefinitions.getJdbcClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jdbcClient", JdbcClientAutoConfiguration__BeanDefinitions.getJdbcClientBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration$LiquibaseConfiguration", LiquibaseAutoConfiguration__BeanDefinitions.LiquibaseConfiguration.getLiquibaseConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("liquibaseConnectionDetails", LiquibaseAutoConfiguration__BeanDefinitions.LiquibaseConfiguration.getLiquibaseConnectionDetailsBeanDefinition());
    beanFactory.registerBeanDefinition("liquibase", LiquibaseAutoConfiguration__BeanDefinitions.LiquibaseConfiguration.getLiquibaseBeanDefinition());
    beanFactory.registerBeanDefinition("spring.liquibase-org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties", LiquibaseProperties__BeanDefinitions.getLiquibasePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration", LiquibaseAutoConfiguration__BeanDefinitions.getLiquibaseAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("liquibaseDefaultDdlModeProvider", LiquibaseAutoConfiguration__BeanDefinitions.getLiquibaseDefaultDdlModeProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration", SpringBootWebSecurityConfiguration__BeanDefinitions.getSpringBootWebSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration", SecurityAutoConfiguration__BeanDefinitions.getSecurityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationEventPublisher", SecurityAutoConfiguration__BeanDefinitions.getAuthenticationEventPublisherBeanDefinition());
    beanFactory.registerBeanDefinition("spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties", SecurityProperties__BeanDefinitions.getSecurityPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration", SecurityFilterAutoConfiguration__BeanDefinitions.getSecurityFilterAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("securityFilterChainRegistration", SecurityFilterAutoConfiguration__BeanDefinitions.getSecurityFilterChainRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ServletSessionConfiguration$ServletSessionRepositoryConfiguration", SessionAutoConfiguration__BeanDefinitions.ServletSessionConfiguration.ServletSessionRepositoryConfiguration.getServletSessionRepositoryConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ServletSessionConfiguration$RememberMeServicesConfiguration", SessionAutoConfiguration__BeanDefinitions.ServletSessionConfiguration.RememberMeServicesConfiguration.getRememberMeServicesConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("rememberMeServicesCookieSerializerCustomizer", SessionAutoConfiguration__BeanDefinitions.ServletSessionConfiguration.RememberMeServicesConfiguration.getRememberMeServicesCookieSerializerCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.session.SessionAutoConfiguration$ServletSessionConfiguration", SessionAutoConfiguration__BeanDefinitions.ServletSessionConfiguration.getServletSessionConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("cookieSerializer", SessionAutoConfiguration__BeanDefinitions.ServletSessionConfiguration.getCookieSerializerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.session.SessionAutoConfiguration", SessionAutoConfiguration__BeanDefinitions.getSessionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.webflux-org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties", WebFluxProperties__BeanDefinitions.getWebFluxPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.session-org.springframework.boot.autoconfigure.session.SessionProperties", SessionProperties__BeanDefinitions.getSessionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration", DataSourceInitializationConfiguration__BeanDefinitions.getDataSourceInitializationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dataSourceScriptDatabaseInitializer", DataSourceInitializationConfiguration__BeanDefinitions.getDataSourceScriptDatabaseInitializerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration", SqlInitializationAutoConfiguration__BeanDefinitions.getSqlInitializationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties", SqlInitializationProperties__BeanDefinitions.getSqlInitializationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration", TaskSchedulingConfigurations__BeanDefinitions.ThreadPoolTaskSchedulerBuilderConfiguration.getThreadPoolTaskSchedulerBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("threadPoolTaskSchedulerBuilder", TaskSchedulingConfigurations__BeanDefinitions.ThreadPoolTaskSchedulerBuilderConfiguration.getThreadPoolTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration", TaskSchedulingConfigurations__BeanDefinitions.TaskSchedulerBuilderConfiguration.getTaskSchedulerBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskSchedulerBuilder", TaskSchedulingConfigurations__BeanDefinitions.TaskSchedulerBuilderConfiguration.getTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration", TaskSchedulingConfigurations__BeanDefinitions.SimpleAsyncTaskSchedulerBuilderConfiguration.getSimpleAsyncTaskSchedulerBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("simpleAsyncTaskSchedulerBuilder", TaskSchedulingConfigurations__BeanDefinitions.SimpleAsyncTaskSchedulerBuilderConfiguration.getSimpleAsyncTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerConfiguration", TaskSchedulingConfigurations__BeanDefinitions.TaskSchedulerConfiguration.getTaskSchedulerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskScheduler", TaskSchedulingConfigurations__BeanDefinitions.TaskSchedulerConfiguration.getTaskSchedulerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("scheduledBeanLazyInitializationExcludeFilter", TaskSchedulingAutoConfiguration__BeanDefinitions.getScheduledBeanLazyInitializationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties", TaskSchedulingProperties__BeanDefinitions.getTaskSchedulingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration", DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.JdbcTransactionManagerConfiguration.getJdbcTransactionManagerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration", DataSourceTransactionManagerAutoConfiguration__BeanDefinitions.getDataSourceTransactionManagerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration", TransactionAutoConfiguration__BeanDefinitions.TransactionTemplateConfiguration.getTransactionTemplateConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("transactionTemplate", TransactionAutoConfiguration__BeanDefinitions.TransactionTemplateConfiguration.getTransactionTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration", TransactionAutoConfiguration__BeanDefinitions.getTransactionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration", RestClientAutoConfiguration__BeanDefinitions.getRestClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("httpMessageConvertersRestClientCustomizer", RestClientAutoConfiguration__BeanDefinitions.getHttpMessageConvertersRestClientCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("restClientSsl", RestClientAutoConfiguration__BeanDefinitions.getRestClientSslBeanDefinition());
    beanFactory.registerBeanDefinition("restClientBuilderConfigurer", RestClientAutoConfiguration__BeanDefinitions.getRestClientBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restClientBuilder", RestClientAutoConfiguration__BeanDefinitions.getRestClientBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilderConfigurer", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilder", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatWebServerFactoryCustomizer", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.getEmbeddedWebServerFactoryCustomizerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration", HttpEncodingAutoConfiguration__BeanDefinitions.getHttpEncodingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("characterEncodingFilter", HttpEncodingAutoConfiguration__BeanDefinitions.getCharacterEncodingFilterBeanDefinition());
    beanFactory.registerBeanDefinition("localeCharsetMappingsCustomizer", HttpEncodingAutoConfiguration__BeanDefinitions.getLocaleCharsetMappingsCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration", MultipartAutoConfiguration__BeanDefinitions.getMultipartAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("multipartConfigElement", MultipartAutoConfiguration__BeanDefinitions.getMultipartConfigElementBeanDefinition());
    beanFactory.registerBeanDefinition("multipartResolver", MultipartAutoConfiguration__BeanDefinitions.getMultipartResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties", MultipartProperties__BeanDefinitions.getMultipartPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("mvcHandlerMappingIntrospectorRequestTransformer", HandlerMappingIntrospectorRequestTransformer__BeanDefinitions.getMvcHandlerMappingIntrospectorRequestTransformerBeanDefinition());
    beanFactory.registerBeanDefinition("springSecurityFilterChain", WebMvcSecurityConfiguration__BeanDefinitions.CompositeFilterChainProxy.getSpringSecurityFilterChainBeanDefinition());
    beanFactory.registerBeanDefinition("jpaSharedEM_AWC_entityManagerFactory", SharedEntityManagerCreator__BeanDefinitions.getJpaSharedEMAWCentityManagerFactoryBeanDefinition());
  }

  /**
   * Register the aliases.
   */
  public void registerAliases(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerAlias("applicationTaskExecutor", "taskExecutor");
  }
}
